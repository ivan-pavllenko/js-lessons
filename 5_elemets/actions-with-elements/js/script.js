'use strict';

const box = document.getElementById('box'),
  btns = document.getElementsByTagName('button'),
  circles = document.getElementsByClassName('circle'),
  wrapper = document.querySelector('.wrapper'),
  hearts = wrapper.querySelectorAll('.heart'),
  oneHeart = document.querySelector('.heart');

//! Научимся изменять стили этих эл-тов

// console.dir(box); //? получаем наш элемент в качестве обьекта

//? В этом обьекте есть обьект со свойстом style - это инлайновые стили

//! Поменяем свойтва стилей у эл-та box
//? Если в css в имени свойтва было тире то в js записываем в формате camelCase
//? Значения должны быть прописаны также как и в css

//! Свойство style - меняет, добавляет стили у эл-та

//* box.style.backgroundColor = '#C0D891';
//* box.style.width = '500px';

//? У нас сформировались инлайновые стили - по приоритету они самые важные

//! Поменяем свойтва стилей у эл-та btns
//? Обращаемся ко 2-й кнопке, не забываем использовать индекс [1], потому что там у нас псевдомассив

btns[1].style.borderRadius = '100%';

//! Частая ошибка circles.style.backgroundColor = '#F9BCB8';

circles[0].style.backgroundColor = '#F9BCB8';

//! Как назначить сразу несколько инлайн стилей?
//? Для этого есть свойство cssText

//! Свойство cssTexte - позволяет прописать сразу несколько стилей 

box.style.cssText = 'background-color: #C0D891; width: 500px';

//? Сюда можно подставить какую то пременную, это очень полезко когда опр-й параметр мы расчитываем динамически
//* box.style.cssText = `background-color: #C0D891; width: ${num}px`;

//! Произвести над несколькими эл-ми действие
//? Можно использовать: цикл, for of, for each
//? for each существует только тогда, когда мы используем querySelectorAll

// for (let i = 0; i < hearts.length; i++) {
//   hearts[i].style.backgroundColor = '#B0D5EB';
// }

hearts.forEach(item => {
  item.style.backgroundColor = '#B0D5EB';
});

//! Основные методы для работы с элементами на странице
//? Очень часто сайты создаются на основе js. 
//? В React вся верстка состоит из элементов созданых при помощи скрипта

//? Создаем эл-т div, этот элемент существует только внутри js

//! Метод createElement - позволяет создать новый элемент на странице

const div = document.createElement('div');

//? Таким образом мы можем создавать текстовые узлы - это эл-ты без оболочки тега
//* const text = document.createTextNode('A am here!');

//? Элемент существует только внутри js, теперь мы можем его застилизовать (добавить визуальную оболочку)
//? Если мы хоти эл-т полностью поменять, то мы не прописываем кучу style
//? Мы модифицируем css классы эл-в, можем их добавать можем их удалить

//! Свойтво classList - через точку можем писать действия с нашим классом: удаление, добавление, переключение, проверка на содержание, определение кол-ва примененных классов

//! С помощью метода add мы можем добавить определенный класс 

div.classList.add('black');

//? Наш эл-т создан и лежит в коробке который есть только внутри js
//? Любой эл-т можно вставить в конец, вставить после определенного эл-та, удалить или заменить но только по отношению другого эл-та, нам же нужно сказать чётко где разместить эл-т

//! Современные методы для работы со страницей 
//? В устаревших брауз-х они работать не будут

//! Метод append - вставляет в конец родителя какой-о эл-т

//? Добавит наш div (эл-т) в конец body (страницы)

//* document.body.append(div); 

wrapper.append(div);

//? Ещё один формат использование получение пер-х
//? Если я переменную использую только один раз мне её не обязательно помещать в другую переменную

//* document.querySelector('.wrapper').append(div);

//! Метод prepend - вставляет вначало родителя какой-о эл-т

//* wrapper.prepend(div);

//! Метод before - вставляет наш эл-т перед определенным эл-м
//? Нам необходимо указать перед каким эл-м всё это дело мы будем устанавливать

//* hearts[1].before(div);

//! Метод after - вставляет наш эл-т после определенного эл-та

//* hearts[1].after(div);

//! Метод remove - удаляет эл-т со страницы

//* circles[0].remove();

//! Метод replaceWith - заменяет один эл-т другим
//? Указываем какой эл-т мы хотим заменить
//? Указываем каким эл-том мы хотим заменеть

hearts[0].replaceWith(circles[0]);


//! Устаревшие методы для работы со страницей 

//! Метод appendChild - вставляет вначало родителя какой-о эл-т

//* wrapper.appendChild(div);

//! Метод before - вставляет наш эл-т перед определенным эл-м

//* wrapper.insertBefore(div, hearts[0]);

//? 1-й аргумент: какой эл-т мы вставляем div
//? 2-й аргумент: перед каким эл-том мы вставляем hearts[0]

//! Метод remove - удаляет эл-т со страницы
//? Указываем родителя эл-та которого нужно удалить

//* wrapper.removeChild(hearts[1]);

//! Метод replaceChild - заменяет один эл-т другим

//* wrapper.replaceChild(circles[0], hearts[0]);

//? 1-й аргумент: указываем тот эл-т на который мы хотим поменять
//? 2-й аргумент: тот эл-т который меняется

//! Метод innerHTML - добавляет текст или html код прямо в элементы

//? Добавить текст прямо в элемент

div.innerHTML = 'Hello world!';

//?  Добавить html код прямо в элемент

div.innerHTML = '<h1>Hello world!</h1>';

//?  Мы можем динамически при помощи таких строк формировать структуру нашего сайта

//! Метод textContent - добавляет текст прямо в элементы

//* div.textContent = 'Hello';

//?  textContent - используем тогда, когда хотим получить от пользователя текст или записать на странице только текст
//?  innerHTML - используем тогда, когда работаем с HTML структурой

//! Метод insertAdjacentHTML - позволяет вставить кусочек кода перед или после определенных эл-тов (тегов)
//? Указываем тот эл-т над которым будем производить махинации
//? 1-й аргумент: специальное слово 
//? 2-й аргумент: тот HTML код который мы хотим вставить


//? спец. слово: beforebegin - позволяет нам вставить HTML код перед элементом
//* div.insertAdjacentHTML('beforebegin', '<h2>Hello!</h2>');

//? спец. слово: afterend - позволяет нам вставить HTML после эл-та
//* div.insertAdjacentHTML('afterend', '<h2>Hello!</h2>');

//? спец. слово: afterbegin - позволяет нам вставить HTML код в начало эл-та
//* div.insertAdjacentHTML('afterbegin', '<h2>Hello!</h2>');

//? спец. слово: beforeend - позволяет нам вставить HTML код в конец эл-та
div.insertAdjacentHTML('beforeend', '<h2>Hello!</h2>');

//! Ещё один способ получения эл-тов
//? Можно сказать чётко внутри чего мы ищем

//* const hearts = wrapper.querySelectorAll('.heart');