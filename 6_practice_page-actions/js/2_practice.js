/* Задания на урок:

1) Реализовать функционал, что после заполнения формы и нажатия кнопки "Подтвердить" - 
новый фильм добавляется в список. Страница не должна перезагружаться.
Новый фильм должен добавляться в movieDB.movies.
Для получения доступа к значению input - обращаемся к нему как input.value;
P.S. Здесь есть несколько вариантов решения задачи, принимается любой, но рабочий.

2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки

3) При клике на мусорную корзину - элемент будет удаляться из списка (сложно)

4) Если в форме стоит галочка "Сделать любимым" - в консоль вывести сообщение: 
"Добавляем любимый фильм"

5) Фильмы должны быть отсортированы по алфавиту */

//? Скрипт может выполнялся до того как наша DOM структура была готова, тогда наш скрипт не сможет найти определенные эл-ты, чтобы такого не случалось в js есть 2 события котороые мы можем отлавливать
//? 1-е событие load - мы ожидаем загрузки всей страницы
//? 2-е событие DOMContentLoaded - мы ожидаем не всей загрузки страницы, а только построение DOM структуры


'use strict';

document.addEventListener('DOMContentLoaded', () => {

  const movieDB = {
    movies: [
      'Логан',
      'Лига справедливости',
      'Ла-ла лэнд',
      'Одержимость',
      'Скотт Пилигрим против...',
    ],
  };

  const adv = document.querySelectorAll('.promo__adv img'),
    poster = document.querySelector('.promo__bg'),
    genre = poster.querySelector('.promo__genre'),
    movieList = document.querySelector('.promo__interactive-list'),
    addForm = document.querySelector('form.add'),
    addInput = addForm.querySelector('.adding__input'),
    checkbox = addForm.querySelector('[type="checkbox"]');

  //? Чтобы отследить отправку формы есть обраб событий submit

  addForm.addEventListener('submit', (event) => {
    event.preventDefault();

    //? Создам новый фильм const newFilm, ставлю знак присваивания = обращаюсь к тому инпуту с которым взаимодействовал пользователь addInput и проверяю его value
    //? В свойстве value будет то, что ввел пользователь

    let newFilm = addInput.value;

    //? Обращаемся к checkbox, это галочка: которая может быть отмечена или не отмечена (булиновое знач-е)
    //? Свойство checked - используем чтобы получить бул-е знач-е, true - отмечена, false - не отмечена

    const favorite = checkbox.checked;

    //? Когда форма будет подтверждаться, нам необходимо будет создавать новый фильм и помещать его в movieDB.movies

    //? Еслим мы будем нажимать кнопку подтвердить (пустой импут), то увидим что пустые данные будут записываться
    //? У нас ничего не вписано в Input, есть свойтсво value - которое будет содержать пустую строку
    //? Пустая строка - это бул-е знач-е, которое дает false
    //? Условие if (newFilm) будет выполнятся только тогда, когда Input заполнен
    //? Условие if (newFilm) не пустая строка, в (newFilm) - true условие выполнится 
    //? Условие if (newFilm) пустая строка, в (newFilm) - false  условие  не выполнится 


    if (newFilm) {

      //? Нам необходимо отрезать первые 21 символ и к ним добавить ...
      //? Будем использовать метод строк - substring
      //? Обращаюсь к newFilm, буду заменять старую строчку на новый вариант

      if (newFilm.length > 21) {
        newFilm = `${newFilm.substring(0, 22)}...`;
      }

      //? Если галочка отмечена, тоесть у нас будет true в логическом контексте, то мы будем выводить в консоль текст 

      if (favorite) {
        console.log("Добавляем любимый фильм");
      }

      movieDB.movies.push(newFilm);
      sortArr(movieDB.movies);

      createMovieList(movieDB.movies, movieList);
    }


    //? Сбросим форму
    // addForm.reset();
    event.target.reset();

  });


  const deleteAdv = (arr) => {
    arr.forEach((item) => {
      item.remove();
    });
  };

  const makeChanges = () => {
    genre.textContent = 'Драма';
    poster.style.backgroundImage = 'url("img/bg.jpg")';
  };


  const sortArr = (arr) => {
    arr.sort();
  };

  // function sortArr(arr) {
  //   arr.sort();
  // }

  /*  function createMovieList() {
     movieList.innerHTML = '';
     movieDB.movies.forEach((film, i) => {
       movieList.innerHTML += `
         <li li class = "promo__interactive-item" > ${i + 1} ${film}
             <div class = "delete"></div> 
         </li>
     `;
     });
   } */

  //? Сделаем эту ф-ю более универсальную, пока что мы привязываемся к определённым эл-м, которые есть на странице
  //? Сделаем чтобы эту ф-я была независимая, чтобы только на момент вызова узнавала с чем будет работать

  //? film - это фильмы с которыми будем работать
  //? parent - какой родительский блок на странице будет использовать все эти фильмы
  //? Мы это родительский эл-т будем очищать и помещать туда новые фильмы

  function createMovieList(films, parent) {
    parent.innerHTML = '';

    //? Когда я нажимаю на удалить фильм у меня сортировка сбивается
    //? Когда мы будем запускать ф-ю createMovieList, она будет сама внутри себя сортировать эл-ты
    //? Таким образом мы избавимся от лишнего вызова sortArr(movieDB.movies); в конце
    //? Когда только загружается страница мне не нужно это сортировать
    //? Сортировку помещаем в ф-ю  createMovieList, таким образом мы обьеденяем сразу два действия

    sortArr(films);

    //? Теперь мы избавились от лишнего вызова ф-и вконце
    //? При этом когда будет вызываться каждый раз ф-я createMovieList(films, parent); внутри удаления нашего нового эл-та, каждый раз наши эл-ты будут нормально сортироваться

    films.forEach((films, i) => {
      parent.innerHTML += `
        <li li class = "promo__interactive-item" > ${i + 1} ${films}
            <div class = "delete"></div> 
        </li>
    `;
    });

    //? Логика такая - после того как мы создали все фильмы, у нас создались все корзинки
    //? После того как все фильмы и корзинки у нас сформированына странице, я буду вешать обраб соб на каждую из этих корзинок
    //? Буду говорить, если пользователь кликает на нее, я буду удалять родителя у этой корзинки
    //? И помимо того, мне нужно будет удалить тот фильм, который был удален из базы данных
    //? Метод splice


    //? Получаем все корзинки, я их не буду потом использовать, поэтому я прямо на месте буду использовать
    //? В querySelectorAll помещаем все корзинки .delete
    //? и здесь же я их переберу при помощи forEach
    //? Если мы хотим навесить на различные эл-ты одно и тоже событие мы используем forEach
    //? Дальше будет callback ф-я, btn - каждая отдельная кнопка (корзина) и i - нумерация
    //? Нумерация будет особенно нужна -потому что нам необходимо будет знать номер по порядку того эл-та, который мы удяляем, ведь массив содержит эл-ты строго по порядку
    //? Внутри обращаюсь к каждой корзинки btn, навешиваю обраб соб, во внутр  запускаем callback ф-ю

    document.querySelectorAll('.delete').forEach((btn, i) => {
      btn.addEventListener('click', () => {

        btn.parentElement.remove(); //? удяляем родительский эл-т
        movieDB.movies.splice(i, 1); //? удяляем родительский эл-т из базы данных

        //? Метод splice - вырезает определенный эл-т с массива
        //? i - номер с которого мне нужно будет начать, это тот эл-т который мы только что удалили 
        //? 1 - сколько эл-в нужно будет удалить, мне нужно удалить только один эл-т из массива под этим номером  

        //? Нумерация не удаляется при удалении фильмов 
        //? Воспользуемся рекурсией - это когда ф-я вызывает сама себя внутри 
        //? при удалении я хочу чтобы элементы перестраивались 

        // createMovieList(movieDB.movies, movieList);
        createMovieList(films, parent);

      });

    });

  }

  deleteAdv(adv);
  makeChanges();
  // sortArr(movieDB.movies);
  createMovieList(movieDB.movies, movieList);



});