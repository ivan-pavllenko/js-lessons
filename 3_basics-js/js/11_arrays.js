'use strict';
//! Массивы и псевдомассивы
//? Массив - структура которая держит эл-ты по порядку

const arr = [1, 2, 3, 6, 8];

//? Методы которые работают с концом массива

//? Метод pop - удаляет последний эл-т из нашего массива

arr.pop(); //? будет [ 1, 2, 3, 6 ]

//? Метод push - добавляет эл-т в конец массива

arr.push(10); //? будет [ 1, 2, 3, 6, 8, 10 ]

console.log(arr);

//? Методы arr.shift и arr.unshift - не используется, потому что нарушается порядок эл-в
//? Метод arr.shift - удаляет из массива 1-й эл-т
//? Метод arr.unshift - добавляет эл-т в начало массива


//! Для того чтобы перебрать массив мы можем использовать как обычный цикл, for of, forEach

//! Перебор массива с помощью обычного цикла

const arrr = [1, 2, 3, 6, 8];
//? цикл будет отрабатывать до тех пор, пока не закончатся эл-ты в массиве

for (let i = 0; i < arrr.length; i++) {
  console.log(arrr[i]); //?  в i подставляются эл-ты в массиве
}

//! Перебор массива с помощью for of

//? Конструкция for of позволяет перебрать все свойства массива
//? Конструкция for of может перебрать только - массив, строку, псевдомассивы, map, set 

for (let value of arrr) {
  console.log(value);
}

//? На собес. могут спросить как соотносятся между собой свойтсво length и порядковые номера в массиве
//? Свойство length состоит из последнего индекса который есть у нас в массиве +1
const array = [1, 2, 3, 6, 8];

console.log(array.length); //? будет 5

//! Нарушения из правил в коде

const arrray = [1, 2, 3, 6, 8];
arrray[99] = 0;
console.log(arrray.length); //? будет 100, хотя это не так
console.log(arrray); //? будет 94 пустых ячеек [ 1, 2, 3, 6, 8, <94 empty items>, 0 ]

//? Это самое главное нарушение нашего массива - эл-ты лежат не по порядку, не нужно так делать!

//! Перебор массива с помощью forEach

//? Метод forEach - позволяет гибко перебрать все эл-ты которые нах-ся внутри массива
//? Метод forEach - принимает callback ф-ю
//? Метод forEach - проходится по каждому эл-та массива и применяет эту ф-ю на каждом из элементов
//? Эту callback ф-ю мы можем гибко настроить, она принимает 3 аргумента
//? 1-й это элемент который мы сейчас перебираем это 1, 2, 3, 6, 8 (назать можно как угодно) item 
//? 2-й это номер по порядку i
//? 3-й это ссылка на тот массив который мы перебираем arrrays
//? callback ф-я служит для того чтобы выполнится строго после определенного действия
//? Снача выпоняется ф-я forEach а дальше callback ф-я

const arrrays = [1, 2, 3, 6, 8];

arrrays.forEach(function (item, i, arrrays) {
  console.log(`${i}: ${item} внутри массива ${arrrays} `);
});

//? 0: 1 внутри массива 1, 2, 3, 6, 8
//? 1: 2 внутри массива 1, 2, 3, 6, 8
//? 2: 3 внутри массива 1, 2, 3, 6, 8
//? 3: 6 внутри массива 1, 2, 3, 6, 8
//? 4: 8 внутри массива 1, 2, 3, 6, 8

//! Когда использовать какой матод?
//? Обычно используют forEach для всех задач
//? но у метода for of есть один + мы можем использовать break и continue
//? Когда мы используем цикл forEach мы его не сможем остановить на каком то этапе

//? Метод arr.map - точно также перебирает массив но еще и модифицирует его
//? Метод arr.filter - отфильтровует массив, по тому критерию которое мы туда задаем (оставить только четные числа)

//! Задача!
//? От пользователя мы получили большую строку где через какой нибудь знак (,) записаны товары
//? Мы бы хотели просто их взять и превратить в массив, где товары будут лежать по порядку

//? Метод arr.split(s) превращает строку в массив, s - разделитель
const str = prompt('', '');
const products = str.split(', ');
console.log(products);

//? введем в браузере рамдомные товары (через запятую и пробел) нажмем ок
//? Мы получаем массив
//? 0: "toys"
//? 1: "tv"
//? 2: "phone"
//? 3: "smart clock"
//? 4: "tablet"

//? Метод arr.join(s) превращает массив в строку, s - разделитель

const strr = prompt('', '');
const product = strr.split(', '); //? разделили тут строчку котрою я ввел (,) получили массив из нее
console.log(product.join('; ')); //? этот массив обратносклеил в строку разделив через (;)

//? В консоли мы получаем строку через ;


//? Метод arr.sort(fn) - сортировка массива. Если не передать ф-ю сравнения - сортирует эл-ты как строки
//? Сортирует эл-ты в алфавитном порядке

const strrr = prompt('', '');
const productt = strrr.split(', ');
productt.sort();
console.log(productt.join('; '));

//? Особенность - сортирует всё как строки (по первому эл-ту)

const arra = [10, 5, 25, 17, 15];
arra.sort();
console.log(arra); //? [ 10, 15, 17, 25, 5 ]

//? но этого можно избежать, метод sort внутри себя принимает callback ф-ю
//? Мы можем сказать как именно сортровать этот массив

//! Шаблон сортировки для чисел

const arrayy = [10, 5, 25, 17, 15];
arrayy.sort(compareNum);
console.log(arrayy); //? [ 5, 10, 15, 17, 25 ]

function compareNum(a, b) {
  return a - b;
}

//! Псевдомассивы
//? Псевдомассивы - это такой обьект, структура которого совпадает со структурой массива
//? У псевдомассивах нет методов, просто структура которая хранит данные по порядку

let arc = [10, 20, 30];

for (let value of arc) {
  value++;
  console.log(value);
}
// 11 21 31

let arcc = [1, 2, 3, 6, 8];
//? цикл будет отрабатывать до тех пор, пока не закончатся эл-ты в массиве

for (let i = 0; i < arcc.length; i++) {
  arcc[i]++;
  console.log(arcc[i]); //?  в i подставляются эл-ты в массиве
}