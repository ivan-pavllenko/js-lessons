'use strict';
//! Задачи с собеседований на понимание основ

//! •	Какое будет выведено значение: let x = 5; alert( x++ ); 

let q = 5;
alert(q++); //? будет 5

//? Постиксная форма увеличивает значение на 1, но перед тем как это сделать она нам возвращает сначала исходное значение, сначала вернет нам 5

//! •	Чему равно такое выражение: [ ] + false - null + true 

console.log([] + false); //? будет false
console.log(typeof ([] + false)); //? будет string
console.log([] + false - null + true); //? будет NaN

//? Когда мы работаем с пустым массивом он будет приведен к строковому типу данных, а имеено к пустой строке ""
//? Если мы складываем строку с каким то другим типом данных, то мы получаем строку

//! •	Что выведет этот код: let y = 1; let x = y = 2; alert(x); 

let y = 1;
let x = y = 2;
console.log(x); //? будет 2

//? Число это примитивный тип данных и оно передается по значению
//? Идет цепочка с права на лево, присваиваем y = 2; а после данное значение присваиваем x

//! •	Чему равна сумма [ ] + 1 + 2 

console.log([] + 1 + 2); //? будет 12

//? [] это "" Конкетинираем строку с числом. Дальше опять конкетинируем строку с числом 

//! •	Что выведет этот код: alert( "1"[0] )

alert("1" [0]); //? будет 1

//? У строки "1" символ под номером ноль будет 1 

//! •	Чему равно 2 && 1 && null && 0 && undefined

console.log(2 && 1 && null && 0 && undefined); //? будет null

//! Оператор и && всегда запинается на лжи false
//? Когда оператор и && обрабатывает все аргументы, он оден слева на право
//? 2 правда (true) 1 правда (true) null ложь (false)
//? Так как оператор и && наткнулся на ложном выражении, то он его и будет возвращать
//? Дальше код уже не пойдет, сдесь как будто сработал оператор return, вернулось значение null

//! Оператор или || всегда запинается на правде (true)

//! •	Есть ли разница между выражениями? !!( a && b ) и (a && b)

console.log(!!(1 && 2) == (1 && 2)); //? будет null

//? Два эти значения не равны
//? Два знака !! превращают выражение в булиновое

//! •	Что выведет этот код: alert( null || 2 && 3 || 4 );
//? 3
console.log(null || 2 && 3 || 4); //? будет 3

//? Когда мы не уверены какой оператор стработает первым, нужно смотреть таблицу приоритетов операторов
//? И && будет выполнятся первее чем или ||
//? Сначала сравниваем 2 && 3 Когда у нас оба аргумента при логическом значении равны, то у нас этот оператор будет возвращать последнее значение , это 3
//? Сравниваем null || 3
//! Оператор или || всегда запинается на правде (true)
//? Вернется 3 потому что null это не правда, а или || запинается на правде
//? Сравниваем 3 || 4


//! •	a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b 

const a = [1, 2, 3];
const b = [1, 2, 3];

console.log(a == b); //? будет false

//? a не равно b - потому что у нас две различные переменные, которые просто содержат одинаковые данные


//! •	Что выведет этот код: alert( +"Infinity" ); 

alert(+"Infinity"); //? будет false Infinity, тип данных число

//! •	Верно ли сравнение: "Ёжик" > "яблоко" 
console.log("Ёжик" > "яблоко"); //? будет false
console.log("яблоко" > "Ёжик"); //? будет true


//? Идет посимвольное сравнение сначала буквы "Ё" и "я"
//? Таблица с юникодом, посмотреть кто на каких местах находится

//! •	•	Чему равно 0 || "" || 2 || undefined || true || falsе 

console.log(0 || "" || 2 || undefined || true || falsе); //? будет 2

//! Оператор или || всегда запинается на правде (true)
//? вернется 2 , а дальше код уже не пойдёт