'use strict';
//! Callback функции

//? Данная ф-я имеет в себе какую то задержку, 
//? например данная ф-я может общаться с сервером, и сервер ответит нам через пол секунды
//? После того как задержка пройдет в консоле выведется 1

function first() {
  //Do something
  setTimeout(function () {
    console.log(1);
  }, 500);
}

function second() {
  console.log(2);
}

first();
second();

//? В консоль выведется 2 потом задержка пол секунды и 1
//? Вторая ф-я сработает раньше и если смотреть только на код, всё становится не совсем очевидным
//! Правило: если ф-и в коде идут одна за другой это не значит что они выполняются прямо также
//! Callback - это функция которая должна быть выполнена после того как другая ф-я завершила своё выполнение

//? Основной шаблон callback ф-и - то что в другую ф-ю в качестве аргумента в будущем мы сможем передать другую ф-ю
//* function learnJS(lang, callback) {}
//? Только когда выполнится действие от 1-вой ф-и lang, выполнится после этого строго 2-я ф-я callback

function learnJS(lang, callback) {
  console.log(`Я учу ${lang}`);
  callback();
}

//? в 1-й аргумент передаем Java Script, во 2-й аргумент анонимную ф-ю
//? вся часть после 'Java Script'  это анонимная ф-я

learnJS('Java Script', function () {
  console.log('Я прошел этот урок'); //? Анонимная ф-я
});

//? Таким образом у нас всегда будет соблюдатся последовательность
//? Так как мы передали анонимную ф-ю, она после выпонения исчезнет, мы не сможем к ней обратится


//? Но можно сюда передаь осознанную ф-ю

function learnJS(lang, callback) {
  console.log(`Я учу ${lang}`);
  callback();
}

function done() {
  console.log('Я прошел этот урок');
}

learnJS('Java Script', done);

//? Мы передаем ф-ю done без круглых скобок, я передал туда ф-ю
//? Я сказал ф-и learnJS выполни ф-ю done только тогда когда ты до неё здесь callback(); дойдешь
//? Мы будем использовать callback постоянно, пр запросах например к серверу
//? Также с событиями которые происходят на странице, когда пользователь произвел клик - 1-й аргумент, после этого будет выполнятся ф-я которая произойдет строго после клика - 2-й аргумент


//? Итог callback позволяют нам быть уверенными в том что определенный код не начнет исполнение, до того как другой код не завершит свое исполнение