"use strict";
//! Операторы + - / *

console.log('arr' + ' - object'); //? сложение строка + строка, получаем строку
console.log(4 + ' - object'); //? сложение число + строка, получаем строку

//? Если перед строкой поставить + то она превратится в числовой тип данных
console.log(4 + +'5'); //? + перед '5' называется унарный плюс 


//? Инкримент ++ увеличение на 1
//? Декримент -- уменьшение на 1

let incr = 10,
  decr = 10;


//? Префиксная форма записи 
// ++incr;
// ++decr;

//? Постиксная форма записи 
incr++;
decr--;

console.log(incr); //? будет 11
console.log(decr); //? будет 9

//! Если поставить знаки прямо когда мы их используем  

let incre = 10,
  decre = 10;

//? Когда мы используем икремент или дикремент в постиксной форме прямо сразу, сразу взяли результат работы этого оператора - в таком случае постиксная форма возвращает нам сначала старое значение, тоесть 10
//? Постиксная форма сначала возвращает старое значение, а после этого оно его увеличивает или уменьшает

//? Постиксная форма записи 
console.log(incr++); //? будет 10
console.log(decr--); //? будет 10

//? Префиксная форма записи 
console.log(++incr); //? будет 11
console.log(++decr); //? будет 9

//? Оператор %
console.log(5 % 2); //?бужет 1, мы 5 разделили 2 на много раз и получили остаток 1 


//? = присваивания
//? == оператор равенства, сравнение
//? === более строгое стравнение, сравниванием также по типу данных

// console.log(2 + 2 == 4); //? будет true
// console.log(2 + 2 === 4); //? будет true
// console.log(2 + '2' === 4); //? будет false (2 + '2' будет 22) сравниванием строку и число
// console.log('4' == 4); //? будет true, значения равны но типы данных разные
// console.log('4' === 4); //? будет false, потому что сравнивается также по типу данных
// console.log(4 + '4'); //? произойдёт конкетинация - это сложение двух строк, будет 44

//! Если мы что то складываем со со сторокой, то всё наше выражение превращается в строку

//? Оператор и &&
//? Оператор или ||


//? Можем проверить какой-то чекбокс отмечен и какое-то модальное окно закрыто

//? Оператор и &&  - работает если у нас 2 или больше значения являются правдивыми выражениями, и это правда и это правда и это правда

const isChecked = true,
  isClose = true;
console.log(isChecked && isClose); //? будет true

const isCheck = true,
  isClos = false;
console.log(isCheck && isClos); //? будет false

//? Оператор или || - работает если один из вариантов будет правдив, хотя бы один из них, или это правда или это правда или это правда

const isCheckedd = true,
  isClosed = false;
console.log(isChecked || isClosed); //? будет true, потому что хотя бы один из аргументов будет правдив
//? или галочка на сайте стоит, у нас что-то отмечено или модальное окно закрыто, одно из этих условий выполняется, поэтому нам возвращается правда  

//? Оператор отрицания ! возвращает значение в обратное ( если была правда он обратит её в ложь)
const isCheckeddd = true,
  isClosedd = false;
console.log(isChecked || !isClosed); //? будет true

//? Оператор не равен !=
console.log(2 + 2 * 2 != 8); //? будет true, 6 не равно 8
console.log(2 + 2 * 2 != '6'); //? будет false, 6 равно 6
console.log(2 + 2 * 2 !== '6'); //? будет true, 6 не равно 6, сторогое сравнение по типу данных 

// let x = 5; //? создали перменную х котороя равна 5

// x = x + 1; //? в будущем хочу увеличить эту переменную на 1, первый способ
// x += 1; //? второй способ
// x++; //? ++ знак инкремент, увеличивает значение переменной на 1
// x--; //? -- знак декримент, уменьшает значение переменной на 1