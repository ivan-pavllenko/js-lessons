'use strict';
//! Основы ООП, прототипно - ориентированное наследование

//? Разные языки используют разные принципы внутри себя, главную роль в js играет обьект
//? Легковой автомобиль имеет
//? свойства: двигатель, кузов, колеса
//? методы: езда, перевозка людей (что он умеет делать)
//? Смысл ООП в том что мы представляем любую вещь как обьект, с набором свойств и методов
//? Легковые авто и будет нашим прототипом

//? Когда строка написана "я строка" то это примитив (простой тип данных)
//? Но как только мы пытаемся вызвать какой-то метод или свойство, то js оборачивает эту строку в обьект
//? и после модификации возвращает опять примитив (простой тип данных)

//? На основании str мы создаем ещё одну строку
let str = 'some';
let strObj = new String(str);

console.log(typeof (str)); //? string
console.log(typeof (strObj)); //? object

//? Когда мы создаем массив, мы создаем новый екземпляр прототипов массивов
console.dir(8, 20, 37);

const ar = [1, 2, 3];
console.log(ar);

//? Создадим солдата и его как то опишем (добавим свойства)
//? Это большой прототип, который описывает всех солдат

const soldier = {
  healt: 400,
  armor: 200,
  sayHello: function () {
    console.log('Hello');
  }
};

//? Создадим конкретного солдата
const jonh = {
  healt: 100
};

//? Необходимо установить связь чтобы джом умел делаь все то что и солдат (у него были такие же свойтсва что и у солдата) но healt было другое 
//! Устаревший формат, к коде может встречаться но сейчас не используется - proto

//* jonh.__proto__ = soldier; 
//? установили протитипа джона солдата

// console.log(jonh.armor); //? будет 200

// jonh.sayHello(); //? будет Hello

//? Несмотря на то, что у обьекта джон только одно свойство, благодаря прототипам, он получил еще свойство armor
//? Можно создать прототип модального окна - и в бущем от этого мод окна мы можем создавать много мод окон, которые будут немножко отличаться (например по ширине)
//? Также как и у нас здесь, у джона изменилось healt, но при этом он может иметь все свойства и методы, которые были у его прототипа

//! Новый формат

Object.setPrototypeOf(jonh, soldier); //? установили протитипа джона солдата

jonh.sayHello(); //? будет Hello

//? 1-й агрумент тот обьект которому я хочу назначить прототип
//? 2-й агрумент тот обьект прототип которого мы устанавливаем

//? Обычно когда мы работаем с кодом мы не сооздаем какие-то левые обьекты, мы это делаем на этапе создания пр-тов
//? Мы создаем новый обьект wane, который будет прототипно наследоваться от солдата

const wane = Object.create(soldier);
wane.sayHello();

//? wane ничего не содержит0 но уже умеет делать это всё (свойства soldier)

//? ООП - это наука как правильно делать архитектуру